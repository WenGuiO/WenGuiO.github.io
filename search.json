[{"title":"Happy New Year -- 2023 !","path":"/2023/01/01/Happy-new-year-2023/","content":"","tags":["生活","杂记"],"categories":["杂记"]},{"title":"教师管理系统C语言(一)-系统介绍","path":"/2022/12/30/教师管理系统C语言(一)-系统介绍/","content":"一、目的和要求教师工资管理是较难处理的信息管理，使用传统方法，浪费时间，并不高效，并且数据容易丢失。为方便处理教师的信息，提高信息管理效率，此次选题为教师工资管理系统。 一个较为完善的教师工资管理系统，需要包含一个教师的完整信息：教师号、姓名、性别、单位名称、家庭住址、联系电话、基本工资、津贴、生活补贴、应发工资、电话费、水电费、房租、所得税、卫生费、公积金，需要对数据进行录入、排序，同时可以对其进行修改、删除、查询功能。本系统面对的对象是教师工资信息管理者，通过执行不同的功能选择，管理者能对教师工资信息进行相应的整理，从而提升信息管理效率。 我希望，通过这次程序设计可以增强我们对所学知识的更进一步认识，去熟悉掌握与灵活运用c语言，我将以所学的函数、数组、指针、链表、文件等知识来实现教师工资管理系统。 二、总体设计1. 基本思路利用链表，数组来对教师信息进行存储；通过函数，指针来对教师信息进行操作，实现相应的功能。 2. 设计思想：A.多个函数来实现整个系统的多个功能。例如，MainMenu函数将整个功能菜单打印出来，显示在界面上，让系统使用者清楚知道有那些功能选择。ShowAllTeacher函数可以遍历系统内存有的教师工资信息，而当想要浏览个别教师信息的时候，调用SearchTeacherById函数与SearchTeacherByName函数，可以分别通过教师号和名字查找到教师。以此类推，调用不同的函数，可以实现数据的录入，修改，删除，保存功能。 B.系统用一个结构体，记录每个教师所有工资信息，将存有数据的文件读取到链表当中，用链表的结点，来实现排序，删除等功能。 C.整个系统中最为重要的是指针。通过指针，可以指向任何变量（只要这个变量是在定义过的结构体内的变量），比数组更简洁迅速地找到目的变量，在实现精准查找，删除和修改等功能中起到了巨大的作用。 D.文件功能，实现将庞大的数据储存，打破数据过大的限制。存入特定的文件后，可以在下一次运行程序中打开文件，对文件的数据进行其他的操作。 3. 系统流程图图1.系统流程 三、数据及数据结构设计描述 struct Teacher为教师信息结构体，储存所有教师信息，通过其创造单向链表，其他功能对其操作从而实现教师的增删减改。 12345678910111213141516171819202122232425262728293031323334353637struct Teacher&#123;​\tint id;​\tchar name[10];​\tchar gender[5];​\tchar work_adress[20];​\tchar home_adress[20];​\tchar tel[11];​\tdouble salary; //基本工资 ​\tdouble allowance; //津贴 ​\tdouble living_all; //生活补贴​\tdouble tel_bill; //电话费 ​\tdouble water_electric_bill; //水电费 ​\tdouble room_charge; //房租​\tdouble income_tax; //所得税 ​\tdouble sanitation_fee; //卫生稅 ​\tdouble reserve_fund; //公积金​\tstruct Teacher* next;&#125;; 四、详细设计1.函数清单及说明1234567891011121314151617181920212223int MainMenu (); //开始主菜单 struct Teacher *ExtractTeacherOfFile(); //初始化链表（从文件提取数据）void ModifyTeacherInformation (struct Teacher *pHead); //信息修改 void AddTeacherInformation (struct Teacher *pHead); //信息录入 int IdIsExist (struct Teacher *pHead, int id); //判断教师号是否重复 void ShowTeacherInformation (struct Teacher *p); //展示教师信息 void DeleteTeacherInformation (struct Teacher *pHead); //信息删除 void SearchMenu (struct Teacher *pHead); //信息查找主菜单 void SearchTeacherById (struct Teacher *pHead); //教师号查找 void SearchTeacherByName (struct Teacher *pHead); //姓名查找 void ShowAllTeachers (struct Teacher *pHead); //查看所有教师信息 void ReserveTeacherInformation (struct Teacher *pHead); //保存信息，退出系统 2. 函数调用关系说明A. 主菜单–int MainMenu() 123456789101112struct Teacher *ExtractTeacherOfFile() //从文件提取教师数据void AddTeacherInformation(struct Teacher *pHead)void DeleteTeacherInformation(struct Teacher *pHead)void ModifyTeacherInformation(struct Teacher *pHead)void SearchMenu(struct Teacher *pHead)void ReserveTeacherInformation(struct Teacher *pHead) B. 录入教师信息–void AddTeacherInformation(struct Teacher *pHead) 1int IdIsExist(struct Teacher* pHead, int id) //判断教师号是否存在 C. 删除教师信息–void DeleteTeacherInformation(struct Teacher *pHead) 1void ShowTeacherInformation(ptem)//展示当前教师信息 D. 修改教师信息–void ModifyTeacherInformation(struct Teacher *pHead) 1void ShowTeacherInformation(ptem) E. 查找教师信息–void SearchMenu(struct Teacher *pHead) 1234567void ShowTeacherInformation(struct Teacher *ptem) void SearchTeacherById(struct Teacher *pHead) //教师号查询void SearchTeacherByName(struct Teacher *pHead) //名字查询void ShowAllTeachers(struct Teacher *pHead) //查看所有教师信息 F. 退出–void ReserveTeacherInformation(struct Teacher *pHead) 五、系统测试分析1. 主菜单程序运行后，成功进入主菜单，输入正确的功能选项可进入相应的功能模块，输入错误则刷新页面重新选择。 图2.主菜单 2. 录入教师信息选择功能“1”，进入教师信息的录入。录入信息完成后，根据提升可选择是否再次录入，选择否则退出教师录入功能。 图3.教师信息录入 3. 修改教师信息选择功能“2”进入教师信息修改功能，输入教师号，显示当前教师信息， 可选择相应修改项， 图4.选择修改项 确定不再需要修改或修改过一次选择“0”返回则显示修改后信息。 图5.修改后信息 未找到该教师则显示“该教师号不存在”，按任意键返回主菜单。 图6.未找到修改教师信息 4. 删除教师信息选择功能“3”进行教师信息删除，输入删除教师号，查找到则提示是否删除，确认删除，展示“删除成功”界面，按任意键返回主菜单。 图7.删除教师信息 若不存在该教师，则提示“该教师号不存在”，按任意键可返回主菜单。 5. 查询教师信息选择功能“4”进入教师信息查询，可选择相对应的查询方式来查询。 A. 以教师号查询 图8.教师号查询 B. 以姓名查询（图9） 图9.姓名查询 图10.查看所有教师信息 C. 查看所有教师信息（图10） D. 选择“0”退出 6. 保存教师信息，退出系统选择功能“0”实现教师信息保存与退出系统，保存成功则显示“保存成功”提示，按任意键退出系统。 图11. 保存教师信息 7. 教师数据提取每次系统运行会自动提取储存在文件中的数据，以防对文件操作导致教师数据丢失。关闭系统，再次打开，以功能“4”是否查找到教师信息为依据，判断是否成功提取。提取成功如图12。 图12.提取数据验证展示 六、其他拓展：系统面对对象可以分为两类：系统管理者与教师。系统管理者可以新增教师，或查看修改所有教师的任何信息，而教师只可以查看与更改自己的信息。同时，为保障所有信息的安全性，每位管理员或教师都有自己的用户名和密码。另外，可以增加教师的各项排名情况，使系统的功能更加多样化。 具体源码设计以及分析请等待更新。","tags":["C语言"]},{"title":"数字钟的设计","path":"/2022/12/30/数字钟的设计/","content":"一、项目概况1. 选题目的数字钟的出现，给人类提供了巨大的便利，人类可以知道自己某个时刻具体干什么事。例如，秒表可以用来记录某一件事的所用的时间，时钟则可以记录一天的过程。本次实验选题目的，就是通过自己所学到的知识去设计一个数字钟，了解数字钟实现的原理，以及加强自己对所学知识的运用。 2. 项目构思要实现数字钟，需要有计数模块，它是是最核心的一部分；需要有对时钟信号进行分频的分频模块；需要有对输出结果的动态扫描、显示模块；以及还有设计拓展的各种小功能模块。基于这些模块功能设计，对其进行输入、输出互联，从而去实现一个具有功能性的数字钟。 二、方案设计1. 系统简介本次实现的数字钟系统中含有各个小模块，具体如下： a. 计数模块：数字钟计数的基础，通过计数来实现数字的变化，从而实现对时间变化的同步。 b. 分频模块：时钟信号的频率过快，我们需要对其实现分频，才可实现现实中1秒时间的变化。 c. 显示模块：对输出结果进行展示，通过输出绑定数码管，实现数字的显示。 d. 动态扫描模块：辅助显示模块，选择相应的数码管进行显示模块的输出显示。 e. 其他功能：基于以上模块，通过其输入输出的连接实现对数字钟的计数，暂停，清零功能。 2. 系统框图图1.系统框图 3. 各模块具体设计a. 计数模块： ①　秒，分（60进制）：利用两个74160分别实现个位计数与十位计数，用个位模块的74160进位端口RCO来实现十位的计数。当十位为0101和个位为1001时，重置计数。 图2.秒、分钟计数模块 ②　时（24进制）：利用两个74160分别实现个位计数与十位计数，用个位模块的74160进位端口RCO来实现十位的计数。当十位为0010和个位为0011时，重置计数。 图3.时钟计数模块 b. 分频模块： ①　利用plm实现对计数模块时钟信号的分频（clkk），设置26位比特位，模值为5010241024，从而得到1hz分频。 ②　利用plm实现对动态扫描计数部分的分频（lclk），通过不断测试，设置20位比特位，模值为25600显示结果正常。 图4.分频模块 c. 显示模块： 图5.显示模块 ①　数据选择器：具体设计如下图，通过动态扫描的数码管位选信号Q的值来选择对应数码管数据（传入的时、分、秒数据）的选择输出。 图6.数据选择器 ②　7447元件：翻译经数据选择器选择的数据信号，翻译成对应的数码管显示。 d. 动态扫描模块： 图7.动态扫描模块 前面的74160为模8计数器，重复的进行8个数码管的选择信号输出，74138通过选择信号控制相应数码管的输出，配合显示模块的时钟数据来进行输出。 e. 秒表，计时器的功能设计： ①　清零（clrn信号）： 通过74160异步置零端口CLRN实现，每个计数器连接上clrn控制信号，首先每个信号先加非门，保证没有任何操作时可以正常工作，但操作输入信号1时同时实现异步清零（连接方式如下图）。 ②　暂停（c信号）： 时钟信号与暂停控制信号组成与门，暂停控制信号后加非门，保证没有任何操作时可以正常工作，而当输入信号1时，通过与门实现对时钟信号的阻断，从而实现暂停（连接方式如下图）。 ③　校时（s信号）： 在时分秒三个计数模块加入控制信号。控制信号与每个计数器的进位信号组成或门，从而当输入脉冲控制信号时，在没有进位的情况下，每个模块能实现加法计数。（连接方式如下图） 图8.清零-暂停-校时 f. 准点报时功能： 通过判断秒钟与分钟的值，当它们都为00：00或00：01时，通过Q输出来控制输出实现报时效果。 图9.准点报时 4. 设计总图（电路连接总图）：图10.总线路设计 三、仿真与调试1. 计数 仿真a. 秒，分计数模块仿真： 图11 图12 如图所示，计数，进位正常，设计正确。 b. 小时模块仿真： 图13 如图所示，计数，进位正常，设计正确。 2. 遇到主要问题及解决办法a. 动态扫描频率导致数码管显示异常 解决：请教老师大概频率，动手调试测试得以解决 b. 小时一直无法正常计数与校准 解决：同步清零未加与非门，粗心用与门导致 四、结果展示 （具体展示如视频附件） 图14 如图所示，数码管的选择功能正常，显示正常；准点报时功能正常（如图液晶模块边的单独数码管所示）；各功能（123为秒、分、时校时加法计数控制开关，456分别为秒、分、时暂停控制开关，8为清零开关）正常。 图15","tags":["数电","数字钟"]},{"title":"博客搭建","path":"/2022/12/29/博客搭建/","content":"wait……","tags":["博客"],"categories":["博客搭建"]},{"title":"stellar探索","path":"/2022/12/28/stellar探索/","content":"top1234567#展示目录结构toc: layout: toc list_number: false min_depth: 2 max_depth: 5 fallback: recent # 当无目录结构时展示&quot;近期更新&quot; stellar官方文档"},{"title":"bug日志","path":"/2022/12/28/bug日志/","content":"BUG日志2022-121212-30 15:38 : 头像未显示 [已解决： 12-30 15:45]12-30 15:21 : 手机端(部分浏览器)无法加载图片 [猜测部分浏览器无法兼容]","tags":["bug"],"categories":["日志记录"]},{"title":"About","path":"/about/index.html","content":"一个普通大二学生, 就读于杭州一所”大专” 联系方式： QQ: 768476667 E-mail: 768476667@qq.com 微信: wengui1107"},{"title":"笔记介绍","path":"/wiki/JavaWeb/index.html","content":"wait…"},{"title":"MySQL基础","path":"/wiki/JavaWeb/mysql基础.html","content":"1. 数据库相关概念以前我们做系统，数据持久化的存储采用的是文件存储。存储到文件中可以达到系统关闭数据不会丢失的效果，当然文件存储也有它的弊端。 假设在文件中存储以下的数据： 1234姓名\t年龄\t性别\t住址张三\t23\t男\t北京西三旗李四\t24\t女\t北京西二旗王五\t25\t男\t西安软件新城 现要修改李四这条数据的性别数据改为男，我们现学习的IO技术可以通过将所有的数据读取到内存中，然后进行修改再存到该文件中。通过这种方式操作存在很大问题，现在只有三条数据，如果文件中存储1T的数据，那么就会发现内存根本就存储不了。 现需要既能持久化存储数据，也要能避免上述问题的技术使用在我们的系统中。数据库就是这样的一门技术。 1.1 数据库 存储和管理数据的仓库，数据是有组织的进行存储。 数据库英文名是 DataBase，简称DB。 将数据存储在硬盘上，可以达到持久化存储的效果 1.2 数据库管理系统 管理数据库的大型软件 英文：DataBase Management System，简称 DBMS 安装了数据库管理系统后，就可以通过数据库管理系统创建数据库来存储数据，也可以通过该系统对数据库中的数据进行数据的增删改查相关的操作。我们平时说的MySQL数据库其实是MySQL数据库管理系统。 1.3 常见的数据库管理系统 简单介绍： Oracle：收费的大型数据库，Oracle 公司的产品 MySQL： 开源免费的中小型数据库。后来 Sun公司收购了 MySQL，而 Sun 公司又被 Oracle 收购 SQL Server：MicroSoft 公司收费的中型的数据库。C#、.net 等语言常使用 PostgreSQL：开源免费中小型的数据库 DB2：IBM 公司的大型收费数据库产品 SQLite：嵌入式的微型数据库。如：作为 Android 内置数据库 MariaDB：开源免费中小型的数据库 2. SQL概述2.1 SQL简介 英文：Structured Query Language，简称 SQL 结构化查询语言，一门操作关系型数据库的编程语言 定义操作所有关系型数据库的统一标准，可以使用SQL操作所有的关系型数据库管理系统，以后工作中如果使用到了其他的数据库管理系统，也同样的使用SQL来操作。 2.2 通用语法 SQL 语句可以单行或多行书写，以分号结尾。 MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。 同样的一条sql语句写成下图的样子，一样可以运行处结果。 注释 单行注释: – 注释内容 或 #注释内容(MySQL 特有) 注意：使用– 添加单行注释时，–后面一定要加空格，而#没有要求。 多行注释: &#x2F;* 注释 *&#x2F; 2.3 SQL分类 DDL(Data Definition Language) ： 数据定义语言，用来定义数据库对象：数据库，表，列等 简单理解: 就是用来操作数据库，表等 DML(Data Manipulation Language) 数据操作语言，用来对数据库中表的数据进行增删改 简单理解: 对表中数据进行增删改 DQL(Data Query Language) 数据查询语言，用来查询数据库中表的记录(数据) 简单理解: 对数据进行查询操作。从数据库表中查询到我们想要的数据。 DCL(Data Control Language) 数据控制语言，用来定义数据库的访问权限和安全级别，及创建用户 DML简单理解就是对数据库进行权限控制。比如我让某一个数据库表只能让某一个用户进行操作等。 注意： 以后我们最常操作的是 DML 和 DQL ，因为我们开发中最常操作的就是数据。 3. DDL:操作数据库我们先来学习DDL来操作数据库。而操作数据库主要就是对数据库的增删查操作。 3.1 查询查询所有的数据库 1SHOW DATABASES; 3.2 创建数据库 创建数据库： 1CREATE DATABASE 数据库名称; 创建数据库(判断，如果不存在则创建) 1CREATE DATABASE IF NOT EXISTS 数据库名称; 3.3 删除数据库 删除数据库 1DROP DATABASE 数据库名称; 删除数据库(判断，如果存在则删除) 1DROP DATABASE IF EXISTS 数据库名称; 3.4 使用数据库 使用数据库 1USE 数据库名称; 查看当前使用的数据库 1SELECT DATABASE(); 4. DDL:操作表操作表也就是对表进行增（Create）删（Retrieve）改（Update）查（Delete）。 4.1 查询表 查询当前数据库下所有表名称 1SHOW TABLES; 查询表结构 1DESC 表名称; 4.2 创建表 创建表123456CREATE TABLE 表名 (\t字段名1 数据类型1,\t字段名2 数据类型2,\t…\t字段名n 数据类型n); 注意：最后一行末尾，不能加逗号 如： 12345create table user (\tid int, username varchar(20), password varchar(32)); 4.3 数据类型MySQL 支持多种类型，可以分为三类： 数值 123456tinyint : 小整数型，占一个字节int\t： 大整数类型，占四个字节\teg ： age intdouble ： 浮点类型\t使用格式： 字段名 double(总长度,小数点后保留的位数)\teg ： score double(5,2) 日期 123date ： 日期值。只包含年月日\teg ：birthday date ： datetime ： 混合日期和时间值。包含年月日时分秒 字符串 123456789char ： 定长字符串。\t优点：存储性能高\t缺点：浪费空间\teg ： name char(10) 如果存储的数据字符个数不足10个，也会占10个的空间\tvarchar ： 变长字符串。\t优点：节约空间\t缺点：存储性能底\teg ： name varchar(10) 如果存储的数据字符个数不足10个，那就数据字符个数是几就占几个的空间 4.4 删除表 删除表 1DROP TABLE 表名; 删除表时判断表是否存在 1DROP TABLE IF EXISTS 表名; 4.5 修改表 修改表名 1234ALTER TABLE 表名 RENAME TO 新的表名;-- 将表名student修改为stualter table student rename to stu; 添加一列 1234ALTER TABLE 表名 ADD 列名 数据类型;-- 给stu表添加一列address，该字段类型是varchar(50)alter table stu add address varchar(50); 修改数据类型 1234ALTER TABLE 表名 MODIFY 列名 新数据类型;-- 将stu表中的address字段的类型改为 char(50)alter table stu modify address char(50); 修改列名和数据类型 1234ALTER TABLE 表名 CHANGE 列名 新列名 新数据类型;-- 将stu表中的address字段名改为 addr，类型改为varchar(50)alter table stu change address addr varchar(50); 删除列 1234ALTER TABLE 表名 DROP 列名;-- 将stu表中的addr字段 删除alter table stu drop addr; 5. DMLDML主要是对数据进行增（insert）删（delete）改（update）操作。 5.1 添加数据 给指定列添加数据 1INSERT INTO 表名(列名1,列名2,…) VALUES(值1,值2,…); 给全部列添加数据 1INSERT INTO 表名 VALUES(值1,值2,…); 批量添加数据 12INSERT INTO 表名(列名1,列名2,…) VALUES(值1,值2,…),(值1,值2,…),(值1,值2,…)…;INSERT INTO 表名 VALUES(值1,值2,…),(值1,值2,…),(值1,值2,…)…; 练习 1select * from stu; 123456789101112-- 给指定列添加数据INSERT INTO stu (id, NAME) VALUES (1, &#x27;张三&#x27;);-- 给所有列添加数据，列名的列表可以省略的INSERT INTO stu (id,NAME,sex,birthday,score,email,tel,STATUS) VALUES (2,&#x27;李四&#x27;,&#x27;男&#x27;,&#x27;1999-11-11&#x27;,88.88,&#x27;lisi@itcast.cn&#x27;,&#x27;13888888888&#x27;,1);INSERT INTO stu VALUES (2,&#x27;李四&#x27;,&#x27;男&#x27;,&#x27;1999-11-11&#x27;,88.88,&#x27;lisi@itcast.cn&#x27;,&#x27;13888888888&#x27;,1);-- 批量添加数据INSERT INTO stu VALUES (2,&#x27;李四&#x27;,&#x27;男&#x27;,&#x27;1999-11-11&#x27;,88.88,&#x27;lisi@itcast.cn&#x27;,&#x27;13888888888&#x27;,1),\t(2,&#x27;李四&#x27;,&#x27;男&#x27;,&#x27;1999-11-11&#x27;,88.88,&#x27;lisi@itcast.cn&#x27;,&#x27;13888888888&#x27;,1),\t(2,&#x27;李四&#x27;,&#x27;男&#x27;,&#x27;1999-11-11&#x27;,88.88,&#x27;lisi@itcast.cn&#x27;,&#x27;13888888888&#x27;,1); 5.2 修改数据 修改表数据1UPDATE 表名 SET 列名1=值1,列名2=值2,… [WHERE 条件] ; 注意： 修改语句中如果不加条件，则将所有数据都修改！ 像上面的语句中的中括号，表示在写sql语句中可以省略这部分 练习 将张三的性别改为女 1update stu set sex = &#x27;女&#x27; where name = &#x27;张三&#x27;; 将张三的生日改为 1999-12-12 分数改为99.99 1update stu set birthday = &#x27;1999-12-12&#x27;, score = 99.99 where name = &#x27;张三&#x27;; 注意：如果update语句没有加where条件，则会将表中所有数据全部修改！ 1update stu set sex = &#x27;女&#x27;; 5.3 删除数据 删除数据 1DELETE FROM 表名 [WHERE 条件] ; 练习 12345-- 删除张三记录delete from stu where name = &#x27;张三&#x27;;-- 删除stu表中所有的数据delete from stu; 6. DQL数据库查询操作。 查询的完整语法： 1234567891011121314SELECT 字段列表FROM 表名列表 WHERE 条件列表GROUP BY 分组字段HAVING 分组后条件ORDER BY 排序字段LIMIT 分页限定 我们需要先准备表及一些数据： 123456789101112131415161718192021222324252627-- 删除stu表drop table if exists stu;-- 创建stu表CREATE TABLE stu ( id int, -- 编号 name varchar(20), -- 姓名 age int, -- 年龄 sex varchar(5), -- 性别 address varchar(100), -- 地址 math double(5,2), -- 数学成绩 english double(5,2), -- 英语成绩 hire_date date -- 入学时间);-- 添加数据INSERT INTO stu(id,NAME,age,sex,address,math,english,hire_date) VALUES (1,&#x27;马运&#x27;,55,&#x27;男&#x27;,&#x27;杭州&#x27;,66,78,&#x27;1995-09-01&#x27;),(2,&#x27;马花疼&#x27;,45,&#x27;女&#x27;,&#x27;深圳&#x27;,98,87,&#x27;1998-09-01&#x27;),(3,&#x27;马斯克&#x27;,55,&#x27;男&#x27;,&#x27;香港&#x27;,56,77,&#x27;1999-09-02&#x27;),(4,&#x27;柳白&#x27;,20,&#x27;女&#x27;,&#x27;湖南&#x27;,76,65,&#x27;1997-09-05&#x27;),(5,&#x27;柳青&#x27;,20,&#x27;男&#x27;,&#x27;湖南&#x27;,86,NULL,&#x27;1998-09-01&#x27;),(6,&#x27;刘德花&#x27;,57,&#x27;男&#x27;,&#x27;香港&#x27;,99,99,&#x27;1998-09-01&#x27;),(7,&#x27;张学右&#x27;,22,&#x27;女&#x27;,&#x27;香港&#x27;,99,99,&#x27;1998-09-01&#x27;),(8,&#x27;德玛西亚&#x27;,18,&#x27;男&#x27;,&#x27;南京&#x27;,56,65,&#x27;1994-09-02&#x27;); 6.1 基础查询6.1.1 语法 查询多个字段 12SELECT 字段列表 FROM 表名;SELECT * FROM 表名; -- 查询所有数据 去除重复记录 1SELECT DISTINCT 字段列表 FROM 表名; 起别名 1AS: AS 也可以省略 6.1.2 练习 查询name、age两列 1select name,age from stu; 查询所有列的数据，列名的列表可以使用*替代 1select * from stu; 查询地址信息 1select address from stu; ​ 去除重复记录 1select distinct address from stu; 查询姓名、数学成绩、英语成绩。并通过as给math和english起别名（as关键字可以省略） 12select name,math as 数学成绩,english as 英文成绩 from stu;select name,math 数学成绩,english 英文成绩 from stu; 6.2 条件查询6.2.1 语法 1SELECT 字段列表 FROM 表名 WHERE 条件列表; 条件 条件列表可以使用以下运算符 6.2.2 条件查询练习 查询年龄大于20岁的学员信息 1select * from stu where age &gt; 20; 查询年龄大于等于20岁的学员信息 1select * from stu where age &gt;= 20; 查询年龄大于等于20岁 并且 年龄 小于等于 30岁 的学员信息 12select * from stu where age &gt;= 20 &amp;&amp; age &lt;= 30;select * from stu where age &gt;= 20 and age &lt;= 30; 上面语句中 &amp;&amp; 和 and 都表示并且的意思。建议使用 and 。 也可以使用 between … and 来实现上面需求 1select * from stu where age BETWEEN 20 and 30; 查询入学日期在’1998-09-01’ 到 ‘1999-09-01’ 之间的学员信息 1select * from stu where hire_date BETWEEN &#x27;1998-09-01&#x27; and &#x27;1999-09-01&#x27;; 查询年龄等于18岁的学员信息 1select * from stu where age = 18; 查询年龄不等于18岁的学员信息 12select * from stu where age != 18;select * from stu where age &lt;&gt; 18; 查询年龄等于18岁 或者 年龄等于20岁 或者 年龄等于22岁的学员信息 12select * from stu where age = 18 or age = 20 or age = 22;select * from stu where age in (18,20 ,22); 查询英语成绩为 null的学员信息 null值的比较不能使用 &#x3D; 或者 !&#x3D; 。需要使用 is 或者 is not 123select * from stu where english = null; -- 这个语句是不行的select * from stu where english is null;select * from stu where english is not null; 6.2.3 模糊查询练习 模糊查询使用like关键字，可以使用通配符进行占位: （1）_ : 代表单个任意字符 （2）% : 代表任意个数字符 查询姓’贵’的学员信息 1select * from stu where name like &#x27;贵%&#x27;; 查询第二个字是’贵’的学员信息 1select * from stu where name like &#x27;_贵%&#x27;; 查询名字中包含 ‘贵’ 的学员信息 1select * from stu where name like &#x27;%贵%&#x27;; 6.3 排序查询6.3.1 语法 1SELECT 字段列表 FROM 表名 ORDER BY 排序字段名1 [排序方式1],排序字段名2 [排序方式2] …; 上述语句中的排序方式有两种，分别是： ASC ： 升序排列 （默认值） DESC ： 降序排列 注意：如果有多个排序条件，当前边的条件值一样时，才会根据第二条件进行排序 6.3.2 练习 查询学生信息，按照年龄升序排列 1select * from stu order by age ; 查询学生信息，按照数学成绩降序排列 1select * from stu order by math desc ; 查询学生信息，按照数学成绩降序排列，如果数学成绩一样，再按照英语成绩升序排列 1select * from stu order by math desc , english asc ; 6.4 聚合函数6.4.1 概念 将一列数据作为一个整体，进行纵向计算。 假设有如下表 6.4.2 聚合函数分类 函数名 功能 count(列名) 统计数量（一般选用不为null的列） max(列名) 最大值 min(列名) 最小值 sum(列名) 求和 avg(列名) 平均值 6.4.3 聚合函数语法 1SELECT 聚合函数名(列名) FROM 表; 注意：null 值不参与所有聚合函数运算 6.4.4 练习 统计班级一共有多少个学生 12select count(id) from stu;select count(english) from stu; 上面语句根据某个字段进行统计，如果该字段某一行的值为null的话，将不会被统计。所以可以在count(*) 来实现。* 表示所有字段数据，一行中也不可能所有的数据都为null，所以建议使用 count(*) 1select count(*) from stu; 查询数学成绩的最高分 1select max(math) from stu; 查询数学成绩的最低分 1select min(math) from stu; 查询数学成绩的总分 1select sum(math) from stu; 查询数学成绩的平均分 1select avg(math) from stu; 查询英语成绩的最低分 1select min(english) from stu; 6.5 分组查询6.5.1 语法 1SELECT 字段列表 FROM 表名 [WHERE 分组前条件限定] GROUP BY 分组字段名 [HAVING 分组后条件过滤]; 注意：分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义 6.5.2 练习 查询男同学和女同学各自的数学平均分 1select sex, avg(math) from stu group by sex; 注意：分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义 1select name, sex, avg(math) from stu group by sex; -- 这里查询name字段就没有任何意义 查询男同学和女同学各自的数学平均分，以及各自人数 1select sex, avg(math),count(*) from stu group by sex; 查询男同学和女同学各自的数学平均分，以及各自人数，要求：分数低于70分的不参与分组 1select sex, avg(math),count(*) from stu where math &gt; 70 group by sex; 查询男同学和女同学各自的数学平均分，以及各自人数，要求：分数低于70分的不参与分组，分组之后人数大于2个的 1select sex, avg(math),count(*) from stu where math &gt; 70 group by sex having count(*) &gt; 2; where 和 having 区别： 执行时机不一样：where 是分组之前进行限定，不满足where条件，则不参与分组，而having是分组之后对结果进行过滤。 可判断的条件不一样：where 不能对聚合函数进行判断，having 可以。 6.6 分页查询6.6.1 语法 1SELECT 字段列表 FROM 表名 LIMIT 起始索引 , 查询条目数; 注意： 上述语句中的起始索引是从0开始 6.6.2 练习 从0开始查询，查询3条数据 1select * from stu limit 0 , 3; 每页显示3条数据，查询第1页数据 1select * from stu limit 0 , 3; 每页显示3条数据，查询第2页数据 1select * from stu limit 3 , 3; 起始索引计算公式： 1起始索引 = (当前页码 - 1) * 每页显示的条数"}]